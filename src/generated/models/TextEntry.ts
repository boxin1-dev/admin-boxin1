
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `TextEntry` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model TextEntry
 * 
 */
export type TextEntryModel = runtime.Types.Result.DefaultSelection<Prisma.$TextEntryPayload>

export type AggregateTextEntry = {
  _count: TextEntryCountAggregateOutputType | null
  _avg: TextEntryAvgAggregateOutputType | null
  _sum: TextEntrySumAggregateOutputType | null
  _min: TextEntryMinAggregateOutputType | null
  _max: TextEntryMaxAggregateOutputType | null
}

export type TextEntryAvgAggregateOutputType = {
  id: number | null
}

export type TextEntrySumAggregateOutputType = {
  id: number | null
}

export type TextEntryMinAggregateOutputType = {
  id: number | null
  key: string | null
  value: string | null
  lang: string | null
  updatedAt: Date | null
}

export type TextEntryMaxAggregateOutputType = {
  id: number | null
  key: string | null
  value: string | null
  lang: string | null
  updatedAt: Date | null
}

export type TextEntryCountAggregateOutputType = {
  id: number
  key: number
  value: number
  lang: number
  updatedAt: number
  _all: number
}


export type TextEntryAvgAggregateInputType = {
  id?: true
}

export type TextEntrySumAggregateInputType = {
  id?: true
}

export type TextEntryMinAggregateInputType = {
  id?: true
  key?: true
  value?: true
  lang?: true
  updatedAt?: true
}

export type TextEntryMaxAggregateInputType = {
  id?: true
  key?: true
  value?: true
  lang?: true
  updatedAt?: true
}

export type TextEntryCountAggregateInputType = {
  id?: true
  key?: true
  value?: true
  lang?: true
  updatedAt?: true
  _all?: true
}

export type TextEntryAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TextEntry to aggregate.
   */
  where?: Prisma.TextEntryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TextEntries to fetch.
   */
  orderBy?: Prisma.TextEntryOrderByWithRelationInput | Prisma.TextEntryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TextEntryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TextEntries from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TextEntries.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TextEntries
  **/
  _count?: true | TextEntryCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: TextEntryAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: TextEntrySumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TextEntryMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TextEntryMaxAggregateInputType
}

export type GetTextEntryAggregateType<T extends TextEntryAggregateArgs> = {
      [P in keyof T & keyof AggregateTextEntry]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTextEntry[P]>
    : Prisma.GetScalarType<T[P], AggregateTextEntry[P]>
}




export type TextEntryGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TextEntryWhereInput
  orderBy?: Prisma.TextEntryOrderByWithAggregationInput | Prisma.TextEntryOrderByWithAggregationInput[]
  by: Prisma.TextEntryScalarFieldEnum[] | Prisma.TextEntryScalarFieldEnum
  having?: Prisma.TextEntryScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TextEntryCountAggregateInputType | true
  _avg?: TextEntryAvgAggregateInputType
  _sum?: TextEntrySumAggregateInputType
  _min?: TextEntryMinAggregateInputType
  _max?: TextEntryMaxAggregateInputType
}

export type TextEntryGroupByOutputType = {
  id: number
  key: string
  value: string
  lang: string
  updatedAt: Date
  _count: TextEntryCountAggregateOutputType | null
  _avg: TextEntryAvgAggregateOutputType | null
  _sum: TextEntrySumAggregateOutputType | null
  _min: TextEntryMinAggregateOutputType | null
  _max: TextEntryMaxAggregateOutputType | null
}

type GetTextEntryGroupByPayload<T extends TextEntryGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TextEntryGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TextEntryGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TextEntryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TextEntryGroupByOutputType[P]>
      }
    >
  >



export type TextEntryWhereInput = {
  AND?: Prisma.TextEntryWhereInput | Prisma.TextEntryWhereInput[]
  OR?: Prisma.TextEntryWhereInput[]
  NOT?: Prisma.TextEntryWhereInput | Prisma.TextEntryWhereInput[]
  id?: Prisma.IntFilter<"TextEntry"> | number
  key?: Prisma.StringFilter<"TextEntry"> | string
  value?: Prisma.StringFilter<"TextEntry"> | string
  lang?: Prisma.StringFilter<"TextEntry"> | string
  updatedAt?: Prisma.DateTimeFilter<"TextEntry"> | Date | string
}

export type TextEntryOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  key?: Prisma.SortOrder
  value?: Prisma.SortOrder
  lang?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TextEntryWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  key?: string
  AND?: Prisma.TextEntryWhereInput | Prisma.TextEntryWhereInput[]
  OR?: Prisma.TextEntryWhereInput[]
  NOT?: Prisma.TextEntryWhereInput | Prisma.TextEntryWhereInput[]
  value?: Prisma.StringFilter<"TextEntry"> | string
  lang?: Prisma.StringFilter<"TextEntry"> | string
  updatedAt?: Prisma.DateTimeFilter<"TextEntry"> | Date | string
}, "id" | "key">

export type TextEntryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  key?: Prisma.SortOrder
  value?: Prisma.SortOrder
  lang?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.TextEntryCountOrderByAggregateInput
  _avg?: Prisma.TextEntryAvgOrderByAggregateInput
  _max?: Prisma.TextEntryMaxOrderByAggregateInput
  _min?: Prisma.TextEntryMinOrderByAggregateInput
  _sum?: Prisma.TextEntrySumOrderByAggregateInput
}

export type TextEntryScalarWhereWithAggregatesInput = {
  AND?: Prisma.TextEntryScalarWhereWithAggregatesInput | Prisma.TextEntryScalarWhereWithAggregatesInput[]
  OR?: Prisma.TextEntryScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TextEntryScalarWhereWithAggregatesInput | Prisma.TextEntryScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"TextEntry"> | number
  key?: Prisma.StringWithAggregatesFilter<"TextEntry"> | string
  value?: Prisma.StringWithAggregatesFilter<"TextEntry"> | string
  lang?: Prisma.StringWithAggregatesFilter<"TextEntry"> | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"TextEntry"> | Date | string
}

export type TextEntryCreateInput = {
  key: string
  value: string
  lang?: string
  updatedAt?: Date | string
}

export type TextEntryUncheckedCreateInput = {
  id?: number
  key: string
  value: string
  lang?: string
  updatedAt?: Date | string
}

export type TextEntryUpdateInput = {
  key?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
  lang?: Prisma.StringFieldUpdateOperationsInput | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TextEntryUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  key?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
  lang?: Prisma.StringFieldUpdateOperationsInput | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TextEntryCreateManyInput = {
  id?: number
  key: string
  value: string
  lang?: string
  updatedAt?: Date | string
}

export type TextEntryUpdateManyMutationInput = {
  key?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
  lang?: Prisma.StringFieldUpdateOperationsInput | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TextEntryUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  key?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
  lang?: Prisma.StringFieldUpdateOperationsInput | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TextEntryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  key?: Prisma.SortOrder
  value?: Prisma.SortOrder
  lang?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TextEntryAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type TextEntryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  key?: Prisma.SortOrder
  value?: Prisma.SortOrder
  lang?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TextEntryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  key?: Prisma.SortOrder
  value?: Prisma.SortOrder
  lang?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TextEntrySumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}



export type TextEntrySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  key?: boolean
  value?: boolean
  lang?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["textEntry"]>

export type TextEntrySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  key?: boolean
  value?: boolean
  lang?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["textEntry"]>

export type TextEntrySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  key?: boolean
  value?: boolean
  lang?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["textEntry"]>

export type TextEntrySelectScalar = {
  id?: boolean
  key?: boolean
  value?: boolean
  lang?: boolean
  updatedAt?: boolean
}

export type TextEntryOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "key" | "value" | "lang" | "updatedAt", ExtArgs["result"]["textEntry"]>

export type $TextEntryPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TextEntry"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    key: string
    value: string
    lang: string
    updatedAt: Date
  }, ExtArgs["result"]["textEntry"]>
  composites: {}
}

export type TextEntryGetPayload<S extends boolean | null | undefined | TextEntryDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TextEntryPayload, S>

export type TextEntryCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TextEntryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TextEntryCountAggregateInputType | true
  }

export interface TextEntryDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TextEntry'], meta: { name: 'TextEntry' } }
  /**
   * Find zero or one TextEntry that matches the filter.
   * @param {TextEntryFindUniqueArgs} args - Arguments to find a TextEntry
   * @example
   * // Get one TextEntry
   * const textEntry = await prisma.textEntry.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TextEntryFindUniqueArgs>(args: Prisma.SelectSubset<T, TextEntryFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TextEntryClient<runtime.Types.Result.GetResult<Prisma.$TextEntryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TextEntry that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TextEntryFindUniqueOrThrowArgs} args - Arguments to find a TextEntry
   * @example
   * // Get one TextEntry
   * const textEntry = await prisma.textEntry.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TextEntryFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TextEntryFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TextEntryClient<runtime.Types.Result.GetResult<Prisma.$TextEntryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TextEntry that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TextEntryFindFirstArgs} args - Arguments to find a TextEntry
   * @example
   * // Get one TextEntry
   * const textEntry = await prisma.textEntry.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TextEntryFindFirstArgs>(args?: Prisma.SelectSubset<T, TextEntryFindFirstArgs<ExtArgs>>): Prisma.Prisma__TextEntryClient<runtime.Types.Result.GetResult<Prisma.$TextEntryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TextEntry that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TextEntryFindFirstOrThrowArgs} args - Arguments to find a TextEntry
   * @example
   * // Get one TextEntry
   * const textEntry = await prisma.textEntry.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TextEntryFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TextEntryFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TextEntryClient<runtime.Types.Result.GetResult<Prisma.$TextEntryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TextEntries that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TextEntryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TextEntries
   * const textEntries = await prisma.textEntry.findMany()
   * 
   * // Get first 10 TextEntries
   * const textEntries = await prisma.textEntry.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const textEntryWithIdOnly = await prisma.textEntry.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TextEntryFindManyArgs>(args?: Prisma.SelectSubset<T, TextEntryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TextEntryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TextEntry.
   * @param {TextEntryCreateArgs} args - Arguments to create a TextEntry.
   * @example
   * // Create one TextEntry
   * const TextEntry = await prisma.textEntry.create({
   *   data: {
   *     // ... data to create a TextEntry
   *   }
   * })
   * 
   */
  create<T extends TextEntryCreateArgs>(args: Prisma.SelectSubset<T, TextEntryCreateArgs<ExtArgs>>): Prisma.Prisma__TextEntryClient<runtime.Types.Result.GetResult<Prisma.$TextEntryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TextEntries.
   * @param {TextEntryCreateManyArgs} args - Arguments to create many TextEntries.
   * @example
   * // Create many TextEntries
   * const textEntry = await prisma.textEntry.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TextEntryCreateManyArgs>(args?: Prisma.SelectSubset<T, TextEntryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TextEntries and returns the data saved in the database.
   * @param {TextEntryCreateManyAndReturnArgs} args - Arguments to create many TextEntries.
   * @example
   * // Create many TextEntries
   * const textEntry = await prisma.textEntry.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TextEntries and only return the `id`
   * const textEntryWithIdOnly = await prisma.textEntry.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TextEntryCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TextEntryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TextEntryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TextEntry.
   * @param {TextEntryDeleteArgs} args - Arguments to delete one TextEntry.
   * @example
   * // Delete one TextEntry
   * const TextEntry = await prisma.textEntry.delete({
   *   where: {
   *     // ... filter to delete one TextEntry
   *   }
   * })
   * 
   */
  delete<T extends TextEntryDeleteArgs>(args: Prisma.SelectSubset<T, TextEntryDeleteArgs<ExtArgs>>): Prisma.Prisma__TextEntryClient<runtime.Types.Result.GetResult<Prisma.$TextEntryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TextEntry.
   * @param {TextEntryUpdateArgs} args - Arguments to update one TextEntry.
   * @example
   * // Update one TextEntry
   * const textEntry = await prisma.textEntry.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TextEntryUpdateArgs>(args: Prisma.SelectSubset<T, TextEntryUpdateArgs<ExtArgs>>): Prisma.Prisma__TextEntryClient<runtime.Types.Result.GetResult<Prisma.$TextEntryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TextEntries.
   * @param {TextEntryDeleteManyArgs} args - Arguments to filter TextEntries to delete.
   * @example
   * // Delete a few TextEntries
   * const { count } = await prisma.textEntry.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TextEntryDeleteManyArgs>(args?: Prisma.SelectSubset<T, TextEntryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TextEntries.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TextEntryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TextEntries
   * const textEntry = await prisma.textEntry.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TextEntryUpdateManyArgs>(args: Prisma.SelectSubset<T, TextEntryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TextEntries and returns the data updated in the database.
   * @param {TextEntryUpdateManyAndReturnArgs} args - Arguments to update many TextEntries.
   * @example
   * // Update many TextEntries
   * const textEntry = await prisma.textEntry.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TextEntries and only return the `id`
   * const textEntryWithIdOnly = await prisma.textEntry.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TextEntryUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TextEntryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TextEntryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TextEntry.
   * @param {TextEntryUpsertArgs} args - Arguments to update or create a TextEntry.
   * @example
   * // Update or create a TextEntry
   * const textEntry = await prisma.textEntry.upsert({
   *   create: {
   *     // ... data to create a TextEntry
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TextEntry we want to update
   *   }
   * })
   */
  upsert<T extends TextEntryUpsertArgs>(args: Prisma.SelectSubset<T, TextEntryUpsertArgs<ExtArgs>>): Prisma.Prisma__TextEntryClient<runtime.Types.Result.GetResult<Prisma.$TextEntryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TextEntries.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TextEntryCountArgs} args - Arguments to filter TextEntries to count.
   * @example
   * // Count the number of TextEntries
   * const count = await prisma.textEntry.count({
   *   where: {
   *     // ... the filter for the TextEntries we want to count
   *   }
   * })
  **/
  count<T extends TextEntryCountArgs>(
    args?: Prisma.Subset<T, TextEntryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TextEntryCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TextEntry.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TextEntryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TextEntryAggregateArgs>(args: Prisma.Subset<T, TextEntryAggregateArgs>): Prisma.PrismaPromise<GetTextEntryAggregateType<T>>

  /**
   * Group by TextEntry.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TextEntryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TextEntryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TextEntryGroupByArgs['orderBy'] }
      : { orderBy?: TextEntryGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TextEntryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTextEntryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TextEntry model
 */
readonly fields: TextEntryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TextEntry.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TextEntryClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TextEntry model
 */
export interface TextEntryFieldRefs {
  readonly id: Prisma.FieldRef<"TextEntry", 'Int'>
  readonly key: Prisma.FieldRef<"TextEntry", 'String'>
  readonly value: Prisma.FieldRef<"TextEntry", 'String'>
  readonly lang: Prisma.FieldRef<"TextEntry", 'String'>
  readonly updatedAt: Prisma.FieldRef<"TextEntry", 'DateTime'>
}
    

// Custom InputTypes
/**
 * TextEntry findUnique
 */
export type TextEntryFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TextEntry
   */
  select?: Prisma.TextEntrySelect<ExtArgs> | null
  /**
   * Omit specific fields from the TextEntry
   */
  omit?: Prisma.TextEntryOmit<ExtArgs> | null
  /**
   * Filter, which TextEntry to fetch.
   */
  where: Prisma.TextEntryWhereUniqueInput
}

/**
 * TextEntry findUniqueOrThrow
 */
export type TextEntryFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TextEntry
   */
  select?: Prisma.TextEntrySelect<ExtArgs> | null
  /**
   * Omit specific fields from the TextEntry
   */
  omit?: Prisma.TextEntryOmit<ExtArgs> | null
  /**
   * Filter, which TextEntry to fetch.
   */
  where: Prisma.TextEntryWhereUniqueInput
}

/**
 * TextEntry findFirst
 */
export type TextEntryFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TextEntry
   */
  select?: Prisma.TextEntrySelect<ExtArgs> | null
  /**
   * Omit specific fields from the TextEntry
   */
  omit?: Prisma.TextEntryOmit<ExtArgs> | null
  /**
   * Filter, which TextEntry to fetch.
   */
  where?: Prisma.TextEntryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TextEntries to fetch.
   */
  orderBy?: Prisma.TextEntryOrderByWithRelationInput | Prisma.TextEntryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TextEntries.
   */
  cursor?: Prisma.TextEntryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TextEntries from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TextEntries.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TextEntries.
   */
  distinct?: Prisma.TextEntryScalarFieldEnum | Prisma.TextEntryScalarFieldEnum[]
}

/**
 * TextEntry findFirstOrThrow
 */
export type TextEntryFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TextEntry
   */
  select?: Prisma.TextEntrySelect<ExtArgs> | null
  /**
   * Omit specific fields from the TextEntry
   */
  omit?: Prisma.TextEntryOmit<ExtArgs> | null
  /**
   * Filter, which TextEntry to fetch.
   */
  where?: Prisma.TextEntryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TextEntries to fetch.
   */
  orderBy?: Prisma.TextEntryOrderByWithRelationInput | Prisma.TextEntryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TextEntries.
   */
  cursor?: Prisma.TextEntryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TextEntries from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TextEntries.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TextEntries.
   */
  distinct?: Prisma.TextEntryScalarFieldEnum | Prisma.TextEntryScalarFieldEnum[]
}

/**
 * TextEntry findMany
 */
export type TextEntryFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TextEntry
   */
  select?: Prisma.TextEntrySelect<ExtArgs> | null
  /**
   * Omit specific fields from the TextEntry
   */
  omit?: Prisma.TextEntryOmit<ExtArgs> | null
  /**
   * Filter, which TextEntries to fetch.
   */
  where?: Prisma.TextEntryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TextEntries to fetch.
   */
  orderBy?: Prisma.TextEntryOrderByWithRelationInput | Prisma.TextEntryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TextEntries.
   */
  cursor?: Prisma.TextEntryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TextEntries from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TextEntries.
   */
  skip?: number
  distinct?: Prisma.TextEntryScalarFieldEnum | Prisma.TextEntryScalarFieldEnum[]
}

/**
 * TextEntry create
 */
export type TextEntryCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TextEntry
   */
  select?: Prisma.TextEntrySelect<ExtArgs> | null
  /**
   * Omit specific fields from the TextEntry
   */
  omit?: Prisma.TextEntryOmit<ExtArgs> | null
  /**
   * The data needed to create a TextEntry.
   */
  data: Prisma.XOR<Prisma.TextEntryCreateInput, Prisma.TextEntryUncheckedCreateInput>
}

/**
 * TextEntry createMany
 */
export type TextEntryCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TextEntries.
   */
  data: Prisma.TextEntryCreateManyInput | Prisma.TextEntryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TextEntry createManyAndReturn
 */
export type TextEntryCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TextEntry
   */
  select?: Prisma.TextEntrySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TextEntry
   */
  omit?: Prisma.TextEntryOmit<ExtArgs> | null
  /**
   * The data used to create many TextEntries.
   */
  data: Prisma.TextEntryCreateManyInput | Prisma.TextEntryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TextEntry update
 */
export type TextEntryUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TextEntry
   */
  select?: Prisma.TextEntrySelect<ExtArgs> | null
  /**
   * Omit specific fields from the TextEntry
   */
  omit?: Prisma.TextEntryOmit<ExtArgs> | null
  /**
   * The data needed to update a TextEntry.
   */
  data: Prisma.XOR<Prisma.TextEntryUpdateInput, Prisma.TextEntryUncheckedUpdateInput>
  /**
   * Choose, which TextEntry to update.
   */
  where: Prisma.TextEntryWhereUniqueInput
}

/**
 * TextEntry updateMany
 */
export type TextEntryUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TextEntries.
   */
  data: Prisma.XOR<Prisma.TextEntryUpdateManyMutationInput, Prisma.TextEntryUncheckedUpdateManyInput>
  /**
   * Filter which TextEntries to update
   */
  where?: Prisma.TextEntryWhereInput
  /**
   * Limit how many TextEntries to update.
   */
  limit?: number
}

/**
 * TextEntry updateManyAndReturn
 */
export type TextEntryUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TextEntry
   */
  select?: Prisma.TextEntrySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TextEntry
   */
  omit?: Prisma.TextEntryOmit<ExtArgs> | null
  /**
   * The data used to update TextEntries.
   */
  data: Prisma.XOR<Prisma.TextEntryUpdateManyMutationInput, Prisma.TextEntryUncheckedUpdateManyInput>
  /**
   * Filter which TextEntries to update
   */
  where?: Prisma.TextEntryWhereInput
  /**
   * Limit how many TextEntries to update.
   */
  limit?: number
}

/**
 * TextEntry upsert
 */
export type TextEntryUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TextEntry
   */
  select?: Prisma.TextEntrySelect<ExtArgs> | null
  /**
   * Omit specific fields from the TextEntry
   */
  omit?: Prisma.TextEntryOmit<ExtArgs> | null
  /**
   * The filter to search for the TextEntry to update in case it exists.
   */
  where: Prisma.TextEntryWhereUniqueInput
  /**
   * In case the TextEntry found by the `where` argument doesn't exist, create a new TextEntry with this data.
   */
  create: Prisma.XOR<Prisma.TextEntryCreateInput, Prisma.TextEntryUncheckedCreateInput>
  /**
   * In case the TextEntry was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TextEntryUpdateInput, Prisma.TextEntryUncheckedUpdateInput>
}

/**
 * TextEntry delete
 */
export type TextEntryDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TextEntry
   */
  select?: Prisma.TextEntrySelect<ExtArgs> | null
  /**
   * Omit specific fields from the TextEntry
   */
  omit?: Prisma.TextEntryOmit<ExtArgs> | null
  /**
   * Filter which TextEntry to delete.
   */
  where: Prisma.TextEntryWhereUniqueInput
}

/**
 * TextEntry deleteMany
 */
export type TextEntryDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TextEntries to delete
   */
  where?: Prisma.TextEntryWhereInput
  /**
   * Limit how many TextEntries to delete.
   */
  limit?: number
}

/**
 * TextEntry without action
 */
export type TextEntryDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TextEntry
   */
  select?: Prisma.TextEntrySelect<ExtArgs> | null
  /**
   * Omit specific fields from the TextEntry
   */
  omit?: Prisma.TextEntryOmit<ExtArgs> | null
}
